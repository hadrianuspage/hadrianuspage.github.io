		
			function _0x2acd(_0x5f4990, _0x3dea92) { const _0x131631 = _0x1316(); return _0x2acd = function (_0x2acd38, _0x1f5207) { _0x2acd38 = _0x2acd38 - 0xc9; let _0x758952 = _0x131631[_0x2acd38]; return _0x758952; }, _0x2acd(_0x5f4990, _0x3dea92); } (function (_0x4bdfcc, _0x36b947) { const _0x566290 = _0x2acd, _0x2f04b6 = _0x4bdfcc(); while (!![]) { try { const _0xb6bb21 = -parseInt(_0x566290(0xd5)) / 0x1 + -parseInt(_0x566290(0xcf)) / 0x2 * (parseInt(_0x566290(0xf4)) / 0x3) + -parseInt(_0x566290(0xf8)) / 0x4 + parseInt(_0x566290(0xfc)) / 0x5 * (-parseInt(_0x566290(0xee)) / 0x6) + parseInt(_0x566290(0x107)) / 0x7 + -parseInt(_0x566290(0xe1)) / 0x8 * (parseInt(_0x566290(0x106)) / 0x9) + parseInt(_0x566290(0xff)) / 0xa * (parseInt(_0x566290(0xd0)) / 0xb); if (_0xb6bb21 === _0x36b947) break; else _0x2f04b6['push'](_0x2f04b6['shift']()); } catch (_0x4e839d) { _0x2f04b6['push'](_0x2f04b6['shift']()); } } }(_0x1316, 0x5003b), $(function () { 'use strict'; const _0xd51626 = _0x2acd; var _0x565168 = $(_0xd51626(0xe8)), _0x26127a = $('#old-guesses-table'), _0x5ab523 = $(_0xd51626(0xf1)), _0x500720 = $(_0xd51626(0xf2)), _0xd083f5 = $('#colorLabels'), _0x5f0df3 = $(_0xd51626(0x103)), _0x3e201c = $(_0xd51626(0xdd)), _0x48a204 = $(_0xd51626(0x108)), _0x4b8bde = $(_0xd51626(0xde)), _0x3ece7e = $(_0xd51626(0xd7)), _0x4e9f4f = Handlebars[_0xd51626(0xd1)]($('#new-guess-template')[_0xd51626(0xcb)]()), _0x4d16ea = Handlebars['compile']($(_0xd51626(0xe6))[_0xd51626(0xcb)]()), _0x26dfea = null; function _0x9bcd2a(_0x1c5fca) { const _0x1fe829 = _0xd51626; return _0x1c5fca[Math[_0x1fe829(0xe4)](Math['random']() * _0x1c5fca['length'])]; } function _0x2e99c7(_0xfbf147, _0x7a6ca0) { const _0x12544b = _0xd51626; if (_0xfbf147 < 0x1) throw _0x12544b(0xec); if (_0xfbf147 === 0x1) return _0x7a6ca0['slice'](0x0); let _0x878186 = _0x2e99c7(_0xfbf147 - 0x1, _0x7a6ca0), _0x1249a9 = []; return _0x7a6ca0['forEach'](_0x357ffc => { const _0xc6cea8 = _0x12544b; _0x878186[_0xc6cea8(0xeb)](_0x17dad4 => { const _0x1e4aa5 = _0xc6cea8; _0x1249a9[_0x1e4aa5(0xf5)]([_0x357ffc][_0x1e4aa5(0xd6)](_0x17dad4)); }); }), _0x1249a9; } function _0x3c7650(_0x39c681, _0x1c6661) { const _0x4cf41a = _0xd51626; if (_0x39c681 < 0x1) throw _0x4cf41a(0xec); if (_0x39c681 === 0x1) return _0x1c6661[_0x4cf41a(0xe0)](0x0); let _0xd24f9e = []; for (let _0x5b47d6 = 0x0; _0x5b47d6 < _0x1c6661[_0x4cf41a(0x10a)]; _0x5b47d6++) { let _0x4ade01 = _0x1c6661[_0x5b47d6], _0x4e3e41 = _0x1c6661['filter']((_0x52389c, _0x5b4435) => _0x5b4435 != _0x5b47d6), _0x1e723d = _0x3c7650(_0x39c681 - 0x1, _0x4e3e41); _0x1e723d[_0x4cf41a(0xeb)](_0x288477 => { const _0x8a3bbd = _0x4cf41a; _0xd24f9e[_0x8a3bbd(0xf5)]([_0x4ade01][_0x8a3bbd(0xd6)](_0x288477)); }); } return _0xd24f9e; } function _0x2556ac(_0x8767bd, _0x4cff64) { const _0x4e490e = _0xd51626; let _0x532a5d = { 'bothCorrect': 0x0, 'colorCorrect': 0x0 }, _0xea9b02 = [], _0x50fe29 = []; for (let _0x5d9e9c = 0x0; _0x5d9e9c < _0x8767bd[_0x4e490e(0x10a)]; ++_0x5d9e9c) { _0x8767bd[_0x5d9e9c] == _0x4cff64[_0x5d9e9c] ? _0x532a5d[_0x4e490e(0xd2)]++ : (_0xea9b02[_0x4e490e(0xf5)](_0x8767bd[_0x5d9e9c]), _0x50fe29[_0x4e490e(0xf5)](_0x4cff64[_0x5d9e9c])); } return _0xea9b02[_0x4e490e(0xeb)](_0x4c29ff => { const _0x311799 = _0x4e490e; var _0x5abd73 = _0x50fe29['indexOf'](_0x4c29ff); _0x5abd73 != -0x1 && (_0x532a5d[_0x311799(0xf3)]++, _0x50fe29[_0x311799(0x10b)](_0x5abd73, 0x1)); }), _0x532a5d; } function _0x385a88(_0x4b3787, _0x25d9c6) { const _0x9f18e7 = _0xd51626; for (let _0x1dee32 in _0x25d9c6) { let _0x2c07e4 = _0x25d9c6[_0x1dee32], _0x195059 = _0x2556ac(_0x4b3787, _0x2c07e4[_0x9f18e7(0xe2)]); if (_0x195059[_0x9f18e7(0xd2)] != _0x2c07e4[_0x9f18e7(0xd2)] || _0x195059['colorCorrect'] != _0x2c07e4[_0x9f18e7(0xf3)]) return !![]; } return ![]; } function _0x3c3a96(_0x36700b, _0xe4ac13) { const _0x31bcfc = _0xd51626; var _0x2716e7 = _0xe4ac13['length']; if (_0x36700b >= _0x2716e7 || _0x36700b < 0x0) throw _0x31bcfc(0x102) + _0x36700b + _0x31bcfc(0xda) + _0x2716e7; if (_0x2716e7 === 0x1) return _0xe4ac13[_0x31bcfc(0xfb)](); var _0x4b64d8 = _0xe4ac13[_0x36700b], _0x2c028f = _0xe4ac13[_0x31bcfc(0xfb)](); return _0xe4ac13[_0x36700b] = _0x2c028f, _0x4b64d8; } function _0x12193b(_0x470dfc, _0x34436f) { const _0x41279f = _0xd51626; let _0x3a080a = Math[_0x41279f(0xe4)](Math[_0x41279f(0xdf)]() * _0x470dfc[_0x41279f(0xfd)][_0x41279f(0x10a)]), _0x520e59 = _0x3c3a96(_0x3a080a, _0x470dfc[_0x41279f(0xfd)]); while (_0x385a88(_0x520e59, _0x34436f)) { if (_0x470dfc['possibleGuesses'][_0x41279f(0x10a)] < 0x1) return null; _0x3a080a = Math[_0x41279f(0xe4)](Math['random']() * _0x470dfc[_0x41279f(0xfd)][_0x41279f(0x10a)]), _0x520e59 = _0x3c3a96(_0x3a080a, _0x470dfc[_0x41279f(0xfd)]); } if (typeof _0x520e59 !== _0x41279f(0xe9)) { debugger; throw _0x41279f(0xca) + typeof _0x520e59; } return _0x520e59; } function _0x37062b(_0x32c374) { const _0x263fb2 = _0xd51626; if (typeof _0x32c374 !== _0x263fb2(0xe9)) throw _0x263fb2(0x109) + typeof _0x32c374; return _0x32c374[_0x263fb2(0xce)](',\x20'); } function _0x5993b7() { const _0x2276df = _0xd51626; _0x4b8bde[_0x2276df(0xd9)](), _0x3ece7e[_0x2276df(0xd9)](); if (_0x500720['find'](_0x2276df(0xd3))[_0x2276df(0x10a)] != 0x0) { let _0x16ddef = parseInt(_0x500720['find']('.bothCorrect')[_0x2276df(0xed)]()), _0xb98543 = parseInt(_0x500720[_0x2276df(0xef)]('.colorCorrect')[_0x2276df(0xed)]()); if (_0x16ddef + _0xb98543 > _0x26dfea['numPegs']) { _0x4b8bde['text'](_0x2276df(0xf9)), _0x4b8bde[_0x2276df(0x10e)](); return; } if (_0x16ddef == _0x26dfea[_0x2276df(0x101)]) { _0x4b8bde[_0x2276df(0xd9)](), _0x3ece7e[_0x2276df(0x10e)](); return; } _0x26127a[_0x2276df(0x10e)](); let _0x1cb21e = _0x500720[_0x2276df(0xef)](_0x2276df(0x10d))['data'](_0x2276df(0xe2)), _0x64c3c5 = $(_0x4d16ea({ 'guess': _0x37062b(_0x1cb21e), 'bothCorrect': _0x16ddef, 'colorCorrect': _0xb98543 })); _0x64c3c5[_0x2276df(0xdc)](_0x2276df(0xd8), { 'guess': _0x1cb21e, 'bothCorrect': _0x16ddef, 'colorCorrect': _0xb98543 }), _0x5ab523[_0x2276df(0xfe)](_0x64c3c5); } var _0x25aab5 = []; _0x5ab523[_0x2276df(0xef)](_0x2276df(0x104))['each']((_0x219af1, _0x41908d) => { const _0x119f2d = _0x2276df; let _0x2230dd = $(_0x41908d); _0x25aab5[_0x119f2d(0xf5)](_0x2230dd[_0x119f2d(0xdc)](_0x119f2d(0xd8))); }); var _0x55cecc = _0x12193b(_0x26dfea, _0x25aab5); _0x55cecc == null ? (_0x500720[_0x2276df(0xd9)](), _0x4b8bde['html'](_0x2276df(0xd4)), _0x4b8bde[_0x2276df(0x10e)]()) : (_0x500720['html'](_0x4e9f4f({ 'guess': _0x37062b(_0x55cecc), 'numPegs': _0x26dfea[_0x2276df(0x101)] })), _0x500720[_0x2276df(0xef)](_0x2276df(0x10d))[_0x2276df(0xdc)]('guess', _0x55cecc), _0x500720[_0x2276df(0x10e)]()); } _0x565168['on']('click', () => { const _0x5d785e = _0xd51626; _0x5ab523[_0x5d785e(0xcb)](''), _0x500720[_0x5d785e(0xcb)](''), _0x48a204[_0x5d785e(0xd9)](), _0x4b8bde[_0x5d785e(0xd9)](), _0x3ece7e['hide'](); var _0x52761c = parseInt(_0x5f0df3['val'](), 0xa); if (_0x52761c < 0x1) { _0x48a204[_0x5d785e(0xf7)](_0x5d785e(0x10c)), _0x48a204[_0x5d785e(0x10e)](); return; } var _0x507252 = _0xd083f5[_0x5d785e(0xed)]()[_0x5d785e(0xfa)](/[ ,]+/)[_0x5d785e(0xcc)](_0x26ed06 => _0x26ed06[_0x5d785e(0xf0)]())[_0x5d785e(0xea)](_0x56b3c2 => _0x56b3c2 != ''); _0x507252; if (_0x507252[_0x5d785e(0x10a)] < 0x1) { _0x48a204[_0x5d785e(0xf7)]('Need\x20at\x20least\x20one\x20color.'), _0x48a204[_0x5d785e(0x10e)](); return; } var _0x128793 = _0x3e201c['is'](_0x5d785e(0xdb)); if (!_0x128793) { if (_0x507252['length'] < _0x52761c) { _0x48a204[_0x5d785e(0xf7)](_0x5d785e(0x105)), _0x48a204['show'](); return; } } let _0x24dae3 = _0x128793 ? _0x2e99c7(_0x52761c, _0x507252) : _0x3c7650(_0x52761c, _0x507252); _0x26dfea = { 'numPegs': _0x52761c, 'colors': _0x507252, 'allowDups': _0x128793, 'possibleGuesses': _0x24dae3 }, console[_0x5d785e(0xe7)](_0x26dfea), _0x565168['text']('Restart'), _0x5993b7(); }), _0x500720['on'](_0xd51626(0xc9), _0xd51626(0xe3), _0x5993b7), () => { const _0x49e9a6 = _0xd51626; function _0x4940a1(_0x51fa0b, _0x5bc7ef) { return _0x51fa0b !== _0x5bc7ef ? { 'onFail': _0x5e3f14 => { const _0x2c7f0c = _0x2acd; _0x5e3f14(); throw _0x2c7f0c(0xe5); } } : { 'onFail': _0x489f9d => { } }; } function _0x533d7b(_0x36bbd9, _0x231e8d, _0x273a93) { const _0x1a3ec9 = _0x2acd; let _0x2f21f9 = _0x385a88(_0x36bbd9, _0x231e8d); _0x4940a1(_0x2f21f9, _0x273a93)[_0x1a3ec9(0x100)](() => { const _0x3c434a = _0x1a3ec9; console[_0x3c434a(0xe7)]('Expected\x20guess', _0x36bbd9, 'with\x20evidence', _0x231e8d, 'to\x20result\x20in', _0x273a93), _0x385a88(_0x36bbd9, _0x231e8d); }); } ((() => { const _0x4b68c0 = _0x2acd; let _0x39d777 = 0x4, _0xf08861 = [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8], _0x24df22 = [{ 'guess': [0x1, 0x2, 0x3, 0x4], 'bothCorrect': 0x0, 'colorCorrect': 0x0 }]; for (let _0x220c21 = 0x0; _0x220c21 < 0x64; _0x220c21++) { let _0x5baf7e = { 'numPegs': _0x39d777, 'colors': _0xf08861, 'allowDups': ![], 'possibleGuesses': _0x3c7650(_0x39d777, _0xf08861) }, _0x222661 = _0x12193b(_0x5baf7e, _0x24df22); _0x4940a1(_0x222661[_0x4b68c0(0xf6)](0x1) || _0x222661['includes'](0x2) || _0x222661['includes'](0x3) || _0x222661[_0x4b68c0(0xf6)](0x4), ![])[_0x4b68c0(0x100)](() => { const _0x145566 = _0x4b68c0; console[_0x145566(0xe7)]('Expected\x20result\x20to\x20not\x20include', _0x24df22[0x0]['guess'], _0x145566(0xcd), _0x222661); }); } })()), _0x533d7b(['R', 'G', 'B', 'Y'], [{ 'guess': ['B', 'G', 'C', 'C'], 'bothCorrect': 0x1, 'colorCorrect': 0x1 }], ![]), _0x533d7b(['R', 'B', 'Y', 'R'], [{ 'guess': ['G', 'B', 'R', 'Y'], 'bothCorrect': 0x1, 'colorCorrect': 0x3 }], !![]), _0x533d7b(['R', 'G', 'B', 'Y'], [{ 'guess': ['R', 'R', 'R', 'B'], 'bothCorrect': 0x1, 'colorCorrect': 0x1 }, { 'guess': ['Y', 'R', 'B', 'G'], 'bothCorrect': 0x1, 'colorCorrect': 0x3 }], ![]), console[_0x49e9a6(0xe7)]('All\x20tests\x20pass'); }; })); function _0x1316() { const _0x1c168 = ['text', '2620632FGJQyn', 'The\x20sum\x20of\x20Right-Color-and-Column\x20and\x20Right-color-wrong-column\x20should\x20be\x20less\x20than\x20the\x20number\x20of\x20pegs.', 'split', 'pop', '90xyazPR', 'possibleGuesses', 'append', '124980QKLbHx', 'onFail', 'numPegs', 'Tried\x20to\x20access\x20index\x20', '#numPegs', '.evidence', 'If\x20duplicates\x20are\x20not\x20allowed,\x20need\x20at\x20least\x20as\x20many\x20colors\x20as\x20there\x20are\x20pegs.', '81wUEEKn', '2837044CcWauI', '#input-alert', 'Expected\x20guess\x20to\x20be\x20an\x20array\x20but\x20it\x20was\x20a\x20', 'length', 'splice', 'Need\x20at\x20least\x20one\x20peg.', '.guess', 'show', 'click', 'Expected\x20guess\x20to\x20be\x20an\x20array,\x20but\x20it\x20was\x20', 'html', 'map', 'but\x20was', 'join', '1834xResiU', '1342ECCnhO', 'compile', 'bothCorrect', 'input', 'No\x20more\x20available\x20possible\x20combinations.\x20There\x20might\x20be\x20an\x20error\x20in\x20the\x20information\x20you\x20entered\x20above.\x20Click\x20\x27Restart\x27\x20to\x20try\x20again.', '76442NzOCEn', 'concat', '#success', 'evidence', 'hide', '\x20from\x20array\x20of\x20length\x20', ':checked', 'data', '#allowDups', '#cur-guess-alert', 'random', 'slice', '347488Ljoyai', 'guess', 'button', 'floor', 'Test\x20case\x20failed.', '#old-guess-template', 'log', '#start', 'object', 'filter', 'forEach', 'numPegs\x20must\x20be\x20at\x20least\x201.', 'val', '86874whYRir', 'find', 'trim', '#old-guesses', '#cur-guess', 'colorCorrect', '717SwiqIr', 'push', 'includes']; _0x1316 = function () { return _0x1c168; }; return _0x1316(); }
